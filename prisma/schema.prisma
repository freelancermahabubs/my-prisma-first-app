// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
// id Int @id @default(autoincrement())
// col1 Int  @db.UnsignedInt

// col2 BigInt
// col3 BigInt @db.UnsignedBigInt

// col4 Int @db.SmallInt
// col5 Int @db.UnsignedSmallInt

// col6 Int @db.MediumInt
// col7 Int @db.UnsignedMediumInt

// col8 Int @db.TinyInt
// col9 Int @db.UnsignedTinyInt

// col10 Decimal 

// col11 Float 

// col12 Float @db.Float

// col13 BigInt @default(100)
// col14 BigInt @unique
// }
// model StringModel {
// id Int @id @default(autoincrement())
// col1 String //varchar length 191
// col2 String?
// col3 String @default("Bangladesh")
// col4 String @db.VarChar(1200) // Varchar Length 1200
// col5 String @db.TinyText
// col6 String @db.MediumText
// col7 String @db.Text
// col8 String @db.LongText

// }

// enum UserType{
//   New
//   Existing
//   VIP
//   Regular
//   Bad
// }

// model User {
// id Int @id @default(autoincrement())
// remarks UserType // Enum EQu ---> New/Existing/VIP/Regular/Bad
// }
// model User {
// id Int @id @default(autoincrement())
// col1 DateTime // Date Time = Length 3
// col2 DateTime @db.Date // Date
// col3 DateTime @db.Time // Time
// col4 DateTime @db.Timestamp //Timestamp
// col5 DateTime @db.DateTime // Native DateTime
// }
// model User {
// id Int @id @default(autoincrement())
// col1 Boolean @default(true) // Boolean
// col2 String @db.Char(100) @default("Prisma") // Char

// }
// model User {
// id Int @id @default(autoincrement())
// col1 Bytes @db.Blob
// col2 Bytes @db.LongBlob
// col3 Bytes @db.TinyBlob
// col4 Bytes @db.MediumBlob
// col5 Bytes @db.Binary(250)
// col6 Bytes @db.VarBinary(250)

// }


model User {
  id       Int      @id @default(autoincrement())
  email    String   @default("") // Add default value for email
  password String   @default("") // Add default value for password
  profile  Profile?
  post Post[]
  comment Comment[]
}

model Profile {
  id       Int      @id @default(autoincrement())
  fname    String
  lname    String
  city     String
  posCode  String
  userID   Int      @unique
  user     User     @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String
  userID Int
  user User @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  comment Comment[]
}
model Comment {
  id Int @id @default(autoincrement())
  desc String
  userID Int
  user User @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postID Int
  post Post @relation(fields: [postID], references: [id], onDelete: Restrict, onUpdate: Cascade)
}